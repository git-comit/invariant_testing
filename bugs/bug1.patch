diff --git a/foundry.toml b/foundry.toml
index 67caa82..297e111 100644
--- a/foundry.toml
+++ b/foundry.toml
@@ -4,7 +4,7 @@ out = "out"
 libs = ["lib"]
 
 [invariant]
-runs = 2000
+runs = 1000
 depth = 25
 fail_on_revert = false
 call_override = false
diff --git a/src/WETH9.sol b/src/WETH9.sol
index cb4744e..d7d3ce9 100644
--- a/src/WETH9.sol
+++ b/src/WETH9.sol
@@ -16,7 +16,7 @@ contract WETH9 {
     }
 
     function deposit() public payable {
-        balanceOf[msg.sender] += msg.value;
+        balanceOf[msg.sender] += 1;
         emit Deposit(msg.sender, msg.value);
     }
 
diff --git a/test/WETH9.invariants.t.sol b/test/WETH9.invariants.t.sol
index 2a20fb7..672b891 100644
--- a/test/WETH9.invariants.t.sol
+++ b/test/WETH9.invariants.t.sol
@@ -13,10 +13,13 @@ contract WETH9Invriants is Test {
         weth = new WETH9();
         handler = new Handler(weth);
 
-        bytes4[] memory selectors = new bytes4[](3);
+        bytes4[] memory selectors = new bytes4[](6);
         selectors[0] = Handler.deposit.selector;
         selectors[1] = Handler.withdraw.selector;
         selectors[2] = Handler.sendFallback.selector;
+        selectors[3] = Handler.approve.selector;
+        selectors[4] = Handler.transfer.selector;
+        selectors[5] = Handler.transferFrom.selector;
 
         targetSelector(FuzzSelector({addr: address(handler), selectors: selectors}));
 
diff --git a/test/handlers/Handler.sol b/test/handlers/Handler.sol
index 7c5da76..99fa369 100644
--- a/test/handlers/Handler.sol
+++ b/test/handlers/Handler.sol
@@ -39,6 +39,11 @@ contract Handler is CommonBase, StdCheats, StdUtils {
         _;
     }
 
+    modifier useActor(uint256 actorSeed) {
+        currentActor = _actors.rand(actorSeed);
+        _;
+    }
+
     function actors() external returns (address[] memory) {
         return _actors.addrs;
     }
@@ -53,11 +58,11 @@ contract Handler is CommonBase, StdCheats, StdUtils {
         ghost_depositSum += amount;
     }
 
-    function withdraw(uint256 amount) public countCall("withdraw") {
-        amount = bound(amount, 0, weth.balanceOf(msg.sender));
+    function withdraw(uint256 actorSeed, uint256 amount) public useActor(actorSeed) countCall("withdraw") {
+        amount = bound(amount, 0, weth.balanceOf(currentActor));
         if (amount == 0) ghost_zeroWithdrawals++;
 
-        vm.startPrank(msg.sender);
+        vm.startPrank(currentActor);
         weth.withdraw(amount);
         _pay(address(this), amount);
         vm.stopPrank();
@@ -76,6 +81,51 @@ contract Handler is CommonBase, StdCheats, StdUtils {
         ghost_depositSum += amount;
     }
 
+    function approve(uint256 actorSeed, uint256 spenderSeed, uint256 amount)
+        public
+        useActor(actorSeed)
+        countCall("approve")
+    {
+        address spender = _actors.rand(spenderSeed);
+
+        vm.prank(currentActor);
+        weth.approve(spender, amount);
+    }
+
+    function transfer(uint256 actorSeed, uint256 toSeed, uint256 amount)
+        public
+        useActor(actorSeed)
+        countCall("transfer")
+    {
+        address to = _actors.rand(toSeed);
+
+        amount = bound(amount, 0, weth.balanceOf(currentActor));
+
+        vm.prank(currentActor);
+        weth.transfer(to, amount);
+    }
+
+    function transferFrom(uint256 actorSeed, uint256 fromSeed, uint256 toSeed, bool _approve, uint256 amount)
+        public
+        useActor(actorSeed)
+        countCall("transferFrom")
+    {
+        address from = _actors.rand(fromSeed);
+        address to = _actors.rand(toSeed);
+
+        amount = bound(amount, 0, weth.balanceOf(from));
+
+        if (_approve) {
+            vm.prank(from);
+            weth.approve(currentActor, amount);
+        } else {
+            amount = bound(amount, 0, weth.allowance(currentActor, from));
+        }
+
+        vm.prank(currentActor);
+        weth.transferFrom(from, to, amount);
+    }
+
     function forEachActor(function(address) external func) public {
         return _actors.forEach(func);
     }
